/**
 * Problem: Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
 * For example, this binary tree 
 * [1,2,2,3,4,4,3] is symmetric
 */


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) 
    {
        return isMirrorImage(root, root);
    }
    
    
    
    
    
    public boolean isMirrorImage(TreeNode node1, TreeNode node2)
    {
        if(node1 == null && node2 == null)return true; //Base case. If left and right nodes are null, the tree is symmetric.
        
        if(node1 == null || node2 == null) return false; //Base case.
                                                         //If one of the nodes is null and the other is not
                                                         //the tree is asymmetric; return false.
        
       
        
        return (node1.val == node2.val) //First compare the left node to the right node
           
            &&isMirrorImage(node1.left, node2.right) //Then recursively compare the outside nodes
            &&isMirrorImage(node1.right, node2.left); //Recursively compare the inner nodes
            
        
    }

}
