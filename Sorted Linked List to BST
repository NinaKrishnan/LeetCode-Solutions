/**
 * Problem: Given a singly linked list where elements are sorted in ascending order, 
 * convert it to a height balanced BST.
 * For this problem, a height-balanced binary tree is defined as a binary tree
 * in which the depth of the two subtrees of every node never differ by more than 1.
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedListToBST(ListNode head) 
    {
        int[]arr = toArray(head);
        return toBST(arr, 0, arr.length-1);
    }
    
    
    public TreeNode toBST(int[]arr,  int low, int high)
    {
         if(low > high) return null;

        int mid = (high + low)/2;
        int pivotPoint = arr[mid];
        TreeNode node = new TreeNode(pivotPoint);
        
        if(high == low)return node;
                
        node.left = toBST(arr, low, mid-1);
        node.right = toBST(arr, mid+1, high);
        return node;
        
    }
    
    public static int[] toArray(ListNode node)
    {
        int length = getLinkedListLength(node);
        ListNode head = node;
        int[] arr = new int[length];
        int index = 0;
        while(head!=null)
        {
            arr[index] = head.val;
            index++;
            head = head.next;
        }
            
        return arr;
    }
    
    public static int getLinkedListLength(ListNode head)
    {
        if(head==null) return 0;
        int count = 0;
        
        while(head != null)
        {
            count++;
            head = head.next;
        }
        return count;
            
            
    }
    
    
    
    
}
