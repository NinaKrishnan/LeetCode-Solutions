/**
 * Problem: Given a binary tree, find its minimum depth.   
 * The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
 *
 *
 */



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) 
    {
        if(root==null)return 0;
    
        return getMinDepth(root);
    }
    
    
    
    public int getMinDepth(TreeNode node)
    {
        if(node == null)return 0;
        if(node.left==null&&node.right==null)return 1;    //If node is not null and has 0 children, 
                                                          //it is at a depth of 1.
        
      
      
        if(node.left==null&&node.right!=null)return 1+getMinDepth(node.right);
        if(node.right==null&&node.left!=null)return 1+getMinDepth(node.left);
        
        int leftDepth = getMinDepth(node.left);
        int rightDepth = getMinDepth(node.right);
        
        return (Math.min(leftDepth, rightDepth)+1); //Add 1 to depth to account for current node
        
    }
    
    
